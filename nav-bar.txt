import { Component, OnInit } from '@angular/core';
import { CommonModule, JsonPipe, DatePipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import GMFCIAMAuth, { AuthProvider, UserProfile, AuthError } from 'GMF-CIAM-sdk';

// Define interfaces for type safety
interface TokenInfo {
  accessToken: string | null;
  expiresAt: Date | null;
  timeUntilExpiry: string;
}

interface Auth0Config {
  domain: string;
  clientId: string;
  audience: string;
  redirectUri: string;
  scope: string;
  cacheLocation: 'sessionstorage';
}

interface ErrorInfo {
  message: string;
  type: 'error' | 'warning' | 'success';
  timestamp: Date;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, JsonPipe, DatePipe, FormsModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  authClient: AuthProvider | null = null;
  isAuthenticated: boolean = false;
  isLoading: boolean = true;
  userProfile: UserProfile | null = null;
  tokenInfo: TokenInfo | null = null;
  resetEmail: string = '';
  currentError: ErrorInfo | null = null;
  
  // Change password form
  showChangePassword: boolean = false;
  oldPassword: string = '';
  newPassword: string = '';
  confirmPassword: string = '';
  
  // Update profile form
  showUpdateProfile: boolean = false;
  updatedName: string = '';
  updatedNickname: string = '';
  
  auth0Config: Auth0Config = {
    domain: 'dev-vfzstbs1dxkuagab.us.auth0.com',
    clientId: 'CP6smmR7f8NVud69LolHjy8YWSPUZ7g0',
    audience: 'https://dev-vfzstbs1dxkuagab.us.auth0.com/api/v2/', 
    redirectUri: window.location.origin,
    scope: 'openid profile email offline_access',
    cacheLocation: 'sessionstorage'
  };
  
  async ngOnInit() {
    await this.initializeAuth();
    this.setupGlobalErrorListener();
  }
  
  async initializeAuth() {
    this.clearError();
    
    try {
      // Create auth client with enhanced error handling
      this.authClient = await GMFCIAMAuth.createAuthProvider(
        'auth0',
        this.auth0Config
      );
      
      // Set up centralized error handling
      this.authClient.onError((error: AuthError) => {
        this.handleAuthError(error);
      });
      
      // Check authentication status
      this.isAuthenticated = await this.authClient.isAuthenticated();
      
      // If authenticated, get user profile and token info
      if (this.isAuthenticated) {
        await this.loadUserData();
      } else {
        console.log('User is not logged in');
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
      this.showError('Authentication system initialization failed', 'error');
    } finally {
      this.isLoading = false;
    }
  }

  // Centralized error handling
  handleAuthError(error: AuthError) {
    console.error(`[AuthManager] ${error.name}:`, error.message);
    
    // Handle different error types
    switch (error.name) {
      case 'AuthenticationError':
        this.handleAuthenticationError(error);
        break;
      case 'ConfigurationError':
        this.handleConfigurationError(error);
        break;
      case 'NetworkError':
        this.handleNetworkError(error);
        break;
      case 'TokenError':
        this.handleTokenError(error);
        break;
      case 'ValidationError':
        this.handleValidationError(error);
        break;
      default:
        this.handleGenericError(error);
    }
  }

  handleAuthenticationError(error: AuthError) {
    switch (error.code) {
      case 'NOT_AUTHENTICATED':
        this.showError('Please log in to access this feature', 'warning');
        this.isAuthenticated = false;
        break;
      case 'INCORRECT_PASSWORD':
        this.showError('The password you entered is incorrect. Please try again.', 'error');
        break;
      case 'USER_NOT_FOUND':
        this.showError('No account found with this email address.', 'error');
        break;
      case 'INVALID_STATE':
        this.showError('Security check failed. Please try logging in again.', 'error');
        this.isAuthenticated = false;
        break;
      default:
        this.showError(`Authentication failed: ${error.message}`, 'error');
    }
  }

  handleConfigurationError(error: AuthError) {
    console.error('Auth configuration error:', error.message);
    this.showError('Authentication service configuration error. Please contact support.', 'error');
  }

  handleNetworkError(error: AuthError) {
    const status = error.details?.status;
    
    switch (error.code) {
      case 'TOKEN_EXCHANGE_ERROR':
      case 'TOKEN_REFRESH_ERROR':
        if (status === 429) {
          this.showError('Too many requests. Please wait a moment and try again.', 'warning');
        } else {
          this.showError('Authentication service temporarily unavailable. Please try again.', 'warning');
        }
        break;
      case 'PASSWORD_RESET_ERROR':
        this.showError('Unable to send password reset email. Please try again later.', 'error');
        break;
      default:
        if (status >= 500) {
          this.showError('Service temporarily unavailable. Please try again later.', 'warning');
        } else {
          this.showError('Network error. Please check your connection and try again.', 'error');
        }
    }
  }

  handleTokenError(error: AuthError) {
    switch (error.code) {
      case 'INVALID_REFRESH_TOKEN':
      case 'TOKEN_EXPIRED':
      case 'NO_REFRESH_TOKEN':
        this.showError('Your session has expired. Please log in again.', 'warning');
        this.isAuthenticated = false;
        this.userProfile = null;
        this.tokenInfo = null;
        break;
      case 'NO_MANAGEMENT_TOKEN':
        this.showError('This feature requires server-side authentication setup.', 'warning');
        break;
      case 'INVALID_ACCESS_TOKEN':
        this.showError('Authentication error. Please log in again.', 'warning');
        this.isAuthenticated = false;
        break;
      default:
        this.showError(`Authentication token error: ${error.message}`, 'error');
    }
  }

  handleValidationError(error: AuthError) {
    switch (error.code) {
      case 'MISSING_EMAIL':
        this.showError('Please enter your email address.', 'warning');
        break;
      case 'INVALID_EMAIL_FORMAT':
        this.showError('Please enter a valid email address.', 'warning');
        break;
      case 'MISSING_PASSWORDS':
        this.showError('Please enter both current and new passwords.', 'warning');
        break;
      case 'PASSWORD_TOO_SHORT':
        this.showError('Password must be at least 8 characters long.', 'warning');
        break;
      case 'PASSWORD_UNCHANGED':
        this.showError('New password must be different from your current password.', 'warning');
        break;
      case 'EMPTY_UPDATES':
        this.showError('Please provide information to update.', 'warning');
        break;
      default:
        this.showError(`Validation error: ${error.message}`, 'warning');
    }
  }

  handleGenericError(error: AuthError) {
    console.error('Unhandled auth error:', error);
    this.showError(`An unexpected error occurred: ${error.message}`, 'error');
  }
  
  async loadUserData(): Promise<void> {
    if (!this.authClient) return;
    
    try {
      // Get user profile
      const profile = await this.authClient.getUserProfile();
      
      if (profile && typeof profile === 'object' && 'sub' in profile) {
        this.userProfile = profile as UserProfile;
        console.log('User profile loaded:', this.userProfile);
      }
      
      // Update token info
      await this.updateTokenInfo();
    } catch (error) {
      // Error is handled by the error callback
      console.log('Error loading user data, handled by error callback');
    }
  }
  
  async updateTokenInfo(): Promise<void> {
    if (!this.authClient || !this.isAuthenticated) return;
    
    try {
      // Get access token
      const accessToken = await this.authClient.getAccessToken();
      
      // Access expiresAt through the auth client instance
      const expiresAt = (this.authClient as unknown as { expiresAt: number | null }).expiresAt;
      const now = new Date().getTime();
      const timeUntilExpiry = expiresAt ? Math.max(0, Math.floor((expiresAt - now) / 1000 / 60)) : 0;
      
      this.tokenInfo = {
        accessToken: typeof accessToken === 'string' ? accessToken : null,
        expiresAt: expiresAt ? new Date(expiresAt) : null,
        timeUntilExpiry: timeUntilExpiry > 0 ? `${timeUntilExpiry} minutes` : 'Expired'
      };
    } catch (error) {
      // Error is handled by the error callback
      console.log('Error updating token info, handled by error callback');
    }
  }
  
  async loginButton(): Promise<void> {
    this.clearError();
    
    if (!this.authClient) {
      await this.initializeAuth();
    }
    
    if (this.authClient) {
      this.isLoading = true;
      
      try {
        await this.authClient.login();
        // If login succeeds, the page will redirect to Auth0
      } catch (error) {
        // Error is handled by the error callback
        this.isLoading = false;
      }
    }
  }
  
  logout(): void {
    this.clearError();
    
    if (this.authClient) {
      try {
        this.authClient.logout();
        // If logout succeeds, the page will redirect
        // Clear local state
        this.isAuthenticated = false;
        this.userProfile = null;
        this.tokenInfo = null;
      } catch (error) {
        // Error is handled by the error callback
        console.log('Logout error handled by error callback');
      }
    }
  }
  
  async refreshToken(): Promise<void> {
    if (!this.authClient || !this.isAuthenticated) return;
    
    this.clearError();
    this.isLoading = true;
    
    try {
      const success = await this.authClient.refreshToken();
      
      if (success) {
        this.showError('Token refreshed successfully', 'success');
        await this.updateTokenInfo();
        await this.loadUserData();
      }
    } catch (error) {
      // Error is handled by the error callback
      console.log('Token refresh error handled by error callback');
    } finally {
      this.isLoading = false;
    }
  }
  
  async resetPassword(): Promise<void> {
    if (!this.resetEmail) {
      this.showError('Please enter an email address', 'warning');
      return;
    }
    
    this.clearError();
    
    if (!this.authClient) {
      await this.initializeAuth();
    }
    
    if (this.authClient) {
      this.isLoading = true;
      
      try {
        const result = await this.authClient.resetPassword(this.resetEmail);
        
        if (result && typeof result === 'string') {
          this.showError(result, 'success');
          this.resetEmail = '';
        }
      } catch (error) {
        // Error is handled by the error callback
        console.log('Password reset error handled by error callback');
      } finally {
        this.isLoading = false;
      }
    }
  }
  
  async changePassword(): Promise<void> {
    if (!this.oldPassword || !this.newPassword) {
      this.showError('Please fill in both password fields', 'warning');
      return;
    }
    
    if (this.newPassword !== this.confirmPassword) {
      this.showError('New passwords do not match', 'warning');
      return;
    }
    
    if (this.newPassword.length < 8) {
      this.showError('New password must be at least 8 characters long', 'warning');
      return;
    }
    
    if (!this.authClient) return;
    
    this.clearError();
    this.isLoading = true;
    
    try {
      const result = await this.authClient.changePassword(this.oldPassword, this.newPassword);
      
      if (result && typeof result === 'string') {
        this.showError(result, 'success');
        this.cancelChangePassword();
      }
    } catch (error) {
      // Error is handled by the error callback
      console.log('Password change error handled by error callback');
    } finally {
      this.isLoading = false;
    }
  }
  
  async updateProfile(): Promise<void> {
    if (!this.updatedName.trim() && !this.updatedNickname.trim()) {
      this.showError('Please enter at least one field to update', 'warning');
      return;
    }
    
    if (!this.authClient) return;
    
    this.clearError();
    this.isLoading = true;
    
    const updates: Partial<UserProfile> = {};
    if (this.updatedName.trim()) updates.name = this.updatedName.trim();
    if (this.updatedNickname.trim()) updates.nickname = this.updatedNickname.trim();
    
    try {
      const result = await this.authClient.updateUserProfile(updates);
      
      if (result && typeof result === 'object' && 'sub' in result) {
        this.userProfile = result as UserProfile;
        this.showError('Profile updated successfully!', 'success');
        this.cancelUpdateProfile();
      }
    } catch (error) {
      // Error is handled by the error callback
      console.log('Profile update error handled by error callback');
    } finally {
      this.isLoading = false;
    }
  }
  
  // Setup global error listener for Auth0 events
  setupGlobalErrorListener(): void {
    if (typeof window !== 'undefined') {
      window.addEventListener('auth-error', (event: any) => {
        const { error, context } = event.detail;
        this.showError(`Auth Error in ${context}: ${error.message}`, 'error');
        console.error('Global Auth Error:', error);
      });
    }
  }
  
  // Helper methods
  showError(message: string, type: 'error' | 'warning' | 'success' = 'error'): void {
    this.currentError = {
      message,
      type,
      timestamp: new Date()
    };
    
    // Auto-clear success messages after 5 seconds
    if (type === 'success') {
      setTimeout(() => {
        if (this.currentError?.type === 'success') {
          this.clearError();
        }
      }, 5000);
    }
  }
  
  clearError(): void {
    this.currentError = null;
  }
  
  getErrorClass(): string {
    if (!this.currentError) return '';
    
    switch (this.currentError.type) {
      case 'error': return 'error-message';
      case 'warning': return 'warning-message';
      case 'success': return 'success-message';
      default: return 'error-message';
    }
  }
  
  // Form helpers
  showChangePasswordForm(): void {
    this.showChangePassword = true;
    this.showUpdateProfile = false;
    this.clearError();
  }
  
  cancelChangePassword(): void {
    this.showChangePassword = false;
    this.oldPassword = '';
    this.newPassword = '';
    this.confirmPassword = '';
  }
  
  showUpdateProfileForm(): void {
    this.showUpdateProfile = true;
    this.showChangePassword = false;
    this.updatedName = this.userProfile?.name || '';
    this.updatedNickname = this.userProfile?.nickname || '';
    this.clearError();
  }
  
  cancelUpdateProfile(): void {
    this.showUpdateProfile = false;
    this.updatedName = '';
    this.updatedNickname = '';
  }
  
  // Debug helper - Updated to work with new error handling
  getLastSDKError(): string {
    if (!this.authClient) {
      return 'Auth client not initialized';
    }
    
    const error = this.authClient.getLastError();
    if (!error) {
      return 'No recent errors';
    }
    
    return JSON.stringify({
      name: error.name,
      code: error.code,
      message: error.message,
      details: error.details,
      timestamp: error.timestamp
    }, null, 2);
  }

  // Get auth status for debugging
  getAuthStatus(): string {
    if (!this.authClient) {
      return 'Auth client not initialized';
    }

    const status = this.authClient.getAuthStatus();
    return JSON.stringify(status, null, 2);
  }

  // Clear SDK errors
  clearSDKErrors(): void {
    if (this.authClient) {
      this.authClient.clearError();
    }
    this.clearError();
  }

  // Error testing methods for demonstration
  testInvalidEmail(): void {
    console.log('Testing invalid email error...');
    if (this.authClient) {
      // This will trigger a validation error
      this.authClient.resetPassword('invalid-email').catch((error) => {
        console.log('Invalid email error caught:', error);
        // Error handled by error callback
      });
    } else {
      this.showError('Auth client not initialized', 'error');
    }
  }

  testMissingPassword(): void {
    console.log('Testing missing password error...');
    if (this.authClient) {
      // This will trigger a validation error
      this.authClient.changePassword('', '').catch((error) => {
        console.log('Missing password error caught:', error);
        // Error handled by error callback
      });
    } else {
      this.showError('Auth client not initialized', 'error');
    }
  }

  testTokenRefresh(): void {
    console.log('Testing token refresh...');
    if (this.authClient) {
      // This will test token refresh functionality
      this.authClient.refreshToken().catch((error) => {
        console.log('Token refresh error caught:', error);
        // Error handled by error callback
      });
    } else {
      this.showError('Auth client not initialized', 'error');
    }
  }

  // Additional error testing methods
  testShortPassword(): void {
    console.log('Testing short password error...');
    if (this.authClient) {
      this.authClient.changePassword('current', '123').catch((error) => {
        console.log('Short password error caught:', error);
      });
    }
  }

  testEmptyProfileUpdate(): void {
    console.log('Testing empty profile update error...');
    if (this.authClient) {
      this.authClient.updateUserProfile({}).catch((error) => {
        console.log('Empty profile update error caught:', error);
      });
    }
  }

  // Method to check error handling capabilities
  checkErrorHandling(): void {
    console.log('=== Checking Error Handling Capabilities ===');
    
    if (!this.authClient) {
      console.log('❌ Auth client not initialized');
      this.showError('Auth client not initialized', 'error');
      return;
    }

    // Check if new error handling methods exist
    const hasGetLastError = typeof this.authClient.getLastError === 'function';
    const hasClearError = typeof this.authClient.clearError === 'function';
    const hasOnError = typeof this.authClient.onError === 'function';

    console.log('Available error methods:');
    console.log('- getLastError():', hasGetLastError ? '✅' : '❌');
    console.log('- clearError():', hasClearError ? '✅' : '❌');
    console.log('- onError():', hasOnError ? '✅' : '❌');

    if (hasGetLastError && hasClearError && hasOnError) {
      this.showError('✅ New error handling system is active!', 'success');
    } else {
      this.showError('⚠️ Using basic error handling only', 'warning');
    }
  }
}


//index.html
<div style="padding: 20px; max-width: 800px; margin: 0 auto;">
  <h1>GMF CIAM Authentication Demo</h1>
  
  <!-- Error/Success Messages -->
  <div *ngIf="currentError" [class]="getErrorClass()" style="margin-bottom: 20px; padding: 10px; border-radius: 4px; position: relative;">
    <span>{{ currentError.message }}</span>
    <button (click)="clearError()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
    <div style="clear: both;"></div>
    <small style="opacity: 0.7;">{{ currentError.timestamp | date:'medium' }}</small>
  </div>
  
  <!-- Loading State -->
  <div *ngIf="isLoading" style="text-align: center; padding: 20px;">
    <p>Loading...</p>
    <div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
  </div>
  
  <!-- Not Authenticated State -->
  <div *ngIf="!isLoading && !isAuthenticated">
    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h2>Welcome to GMF CIAM Demo</h2>
      <p>You are not logged in. Please log in to access your profile and manage your account.</p>
      <button (click)="loginButton()" style="background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">
        Login with Auth0
      </button>
    </div>
    
    <!-- Password Reset Section -->
    <div style="background: #e9ecef; padding: 20px; border-radius: 8px;">
      <h3>Forgot Your Password?</h3>
      <p>Enter your email address to receive a password reset link.</p>
      <div style="display: flex; gap: 10px; align-items: center; margin-top: 15px;">
        <input 
          type="email" 
          [(ngModel)]="resetEmail" 
          placeholder="Enter your email address"
          style="flex: 1; padding: 8px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px;"
        />
        <button 
          (click)="resetPassword()" 
          [disabled]="!resetEmail || isLoading"
          style="background: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; white-space: nowrap;">
          Send Reset Email
        </button>
      </div>
    </div>
  </div>
  
  <!-- Authenticated State -->
  <div *ngIf="!isLoading && isAuthenticated">
    <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h2>Welcome! You are logged in</h2>
      <div style="display: flex; gap: 10px; margin-top: 15px; flex-wrap: wrap;">
        <button (click)="logout()" style="background: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
          Logout
        </button>
        <button (click)="refreshToken()" [disabled]="isLoading" style="background: #17a2b8; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
          Refresh Token
        </button>
        <button (click)="showChangePasswordForm()" style="background: #ffc107; color: #212529; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
          Change Password
        </button>
        <button (click)="showUpdateProfileForm()" style="background: #6f42c1; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
          Update Profile
        </button>
        <button (click)="clearSDKErrors()" style="background: #6c757d; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
          Clear Errors
        </button>
      </div>
    </div>
    
    <!-- Change Password Form -->
    <div *ngIf="showChangePassword" style="background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h3>Change Password</h3>
      <div style="display: flex; flex-direction: column; gap: 15px; max-width: 400px;">
        <input 
          type="password" 
          [(ngModel)]="oldPassword" 
          placeholder="Current Password"
          style="padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
        <input 
          type="password" 
          [(ngModel)]="newPassword" 
          placeholder="New Password (min 8 characters)"
          style="padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
        <input 
          type="password" 
          [(ngModel)]="confirmPassword" 
          placeholder="Confirm New Password"
          style="padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
        <div style="display: flex; gap: 10px;">
          <button 
            (click)="changePassword()" 
            [disabled]="!oldPassword || !newPassword || !confirmPassword || newPassword !== confirmPassword || isLoading"
            style="background: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
            {{ isLoading ? 'Changing...' : 'Change Password' }}
          </button>
          <button (click)="cancelChangePassword()" style="background: #6c757d; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
            Cancel
          </button>
        </div>
      </div>
    </div>
    
    <!-- Update Profile Form -->
    <div *ngIf="showUpdateProfile" style="background: #e2e3f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h3>Update Profile</h3>
      <div style="display: flex; flex-direction: column; gap: 15px; max-width: 400px;">
        <input 
          type="text" 
          [(ngModel)]="updatedName" 
          placeholder="Full Name"
          style="padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
        <input 
          type="text" 
          [(ngModel)]="updatedNickname" 
          placeholder="Nickname"
          style="padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
        <div style="display: flex; gap: 10px;">
          <button 
            (click)="updateProfile()" 
            [disabled]="(!updatedName.trim() && !updatedNickname.trim()) || isLoading"
            style="background: #007bff; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
            {{ isLoading ? 'Updating...' : 'Update Profile' }}
          </button>
          <button (click)="cancelUpdateProfile()" style="background: #6c757d; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
            Cancel
          </button>
        </div>
      </div>
    </div>
    
    <!-- User Profile Section -->
    <div *ngIf="userProfile" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h3>User Profile</h3>
      <div style="display: grid; grid-template-columns: auto 1fr; gap: 10px; max-width: 500px;">
        <div *ngIf="userProfile.picture" style="grid-column: 1 / -1; text-align: center; margin-bottom: 15px;">
          <img [src]="userProfile.picture" alt="Profile Picture" style="width: 80px; height: 80px; border-radius: 50%; border: 2px solid #dee2e6;">
        </div>
        <strong>Name:</strong> <span>{{ userProfile.name || 'Not provided' }}</span>
        <strong>Email:</strong> <span>{{ userProfile.email || 'Not provided' }}</span>
        <strong>Nickname:</strong> <span>{{ userProfile.nickname || 'Not provided' }}</span>
        <strong>User ID:</strong> <span style="font-family: monospace; font-size: 12px;">{{ userProfile.sub }}</span>
        <strong>Email Verified:</strong> <span>{{ userProfile.email_verified ? 'Yes' : 'No' }}</span>
        <strong>Last Updated:</strong> <span>{{ userProfile.updated_at | date:'medium' }}</span>
      </div>
      
      <!-- Raw Profile Data (Collapsible) -->
      <details style="margin-top: 20px;">
        <summary style="cursor: pointer; font-weight: bold;">View Raw Profile Data</summary>
        <pre style="background: #e9ecef; padding: 10px; border-radius: 4px; font-size: 12px; overflow-x: auto; margin-top: 10px;">{{ userProfile | json }}</pre>
      </details>
    </div>
    
    <!-- Token Information Section -->
    <div *ngIf="tokenInfo" style="background: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h3>Token Information</h3>
      <div style="display: grid; grid-template-columns: auto 1fr; gap: 10px; max-width: 500px;">
        <strong>Access Token:</strong> 
        <span>{{ tokenInfo.accessToken ? '✅ Available' : '❌ Not Available' }}</span>
        
        <strong>Token Expires At:</strong> 
        <span>{{ tokenInfo.expiresAt ? (tokenInfo.expiresAt | date:'medium') : 'Unknown' }}</span>
        
        <strong>Time Until Expiry:</strong> 
        <span [style.color]="tokenInfo.timeUntilExpiry === 'Expired' ? 'red' : 'green'">
          {{ tokenInfo.timeUntilExpiry }}
        </span>
      </div>
      
      <!-- Token Expiry Warning -->
      <div *ngIf="tokenInfo.timeUntilExpiry === 'Expired'" style="background: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; margin-top: 15px;">
        <strong>⚠️ Token Expired:</strong> Your access token has expired. Click "Refresh Token" to get a new one.
      </div>
    </div>
    
    <!-- Enhanced SDK Debug Information -->
    <details style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
      <summary style="cursor: pointer; font-weight: bold;">🔧 Debug Information</summary>
      <div style="margin-top: 15px;">
        <h4>SDK Error State</h4>
        <pre style="background: #e9ecef; padding: 10px; border-radius: 4px; font-size: 12px; overflow-x: auto;">{{ getLastSDKError() }}</pre>
        
        <h4 style="margin-top: 20px;">Authentication Status</h4>
        <pre style="background: #e9ecef; padding: 10px; border-radius: 4px; font-size: 12px; overflow-x: auto;">{{ getAuthStatus() }}</pre>
        
        <h4 style="margin-top: 20px;">Configuration</h4>
        <div style="display: grid; grid-template-columns: auto 1fr; gap: 10px; font-size: 14px;">
          <strong>Domain:</strong> <span>{{ auth0Config.domain }}</span>
          <strong>Client ID:</strong> <span>{{ auth0Config.clientId.substring(0, 8) }}...</span>
          <strong>Audience:</strong> <span>{{ auth0Config.audience }}</span>
          <strong>Scope:</strong> <span>{{ auth0Config.scope }}</span>
          <strong>Storage:</strong> <span>{{ auth0Config.cacheLocation }}</span>
        </div>
        
        <h4 style="margin-top: 20px;">Error Testing</h4>
        <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px;">
          <button (click)="checkErrorHandling()" style="background: #20c997; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Check Error System
          </button>
          <button (click)="testInvalidEmail()" style="background: #fd7e14; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Test Invalid Email
          </button>
          <button (click)="testMissingPassword()" style="background: #fd7e14; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Test Missing Password
          </button>
          <button (click)="testTokenRefresh()" style="background: #fd7e14; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Test Token Refresh
          </button>
          <button (click)="testShortPassword()" style="background: #fd7e14; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Test Short Password
          </button>
          <button (click)="testEmptyProfileUpdate()" style="background: #fd7e14; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
            Test Empty Update
          </button>
        </div>
      </div>
    </details>
  </div>
</div>

<!-- Global Styles -->
<style>
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .error-message {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .warning-message {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
  }
  
  .success-message {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed !important;
  }
  
  button:not(:disabled):hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }
  
  input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
  }
  
  details summary {
    transition: color 0.2s;
  }
  
  details summary:hover {
    color: #007bff;
  }
</style>


main.ts

import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { provideRouter } from '@angular/router';
import { Routes } from '@angular/router';
import { importProvidersFrom } from '@angular/core';
import { FormsModule } from '@angular/forms';

// Define routes directly here or keep it simple with just the main component
const routes: Routes = [
  {
    path: '',
    component: AppComponent
  },
  {
    path: 'callback', // Auth0 callback route
    component: AppComponent
  },
  {
    path: '**',
    redirectTo: ''
  }
];

bootstrapApplication(AppComponent, {
  providers: [
    // HTTP Client with interceptor support
    provideHttpClient(withInterceptorsFromDi()),
    
    // Router configuration
    provideRouter(routes),
    
    // Import FormsModule for ngModel support
    importProvidersFrom(FormsModule),
    
    // Additional providers can be added here
    // For example, if you want to add an HTTP interceptor:
    // { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
  ]
}).catch(err => {
  console.error('Application bootstrap failed:', err);
  
  // Optional: Display user-friendly error message
  const errorDiv = document.createElement('div');
  errorDiv.innerHTML = `
    <div style="
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #f8d7da;
      color: #721c24;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      font-family: Arial, sans-serif;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 9999;
    ">
      <h3>Application Failed to Start</h3>
      <p>Please refresh the page or contact support if the problem persists.</p>
      <small>Error: ${err.message || 'Unknown error'}</small>
    </div>
  `;
  document.body.appendChild(errorDiv);
});
